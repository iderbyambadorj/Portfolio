model = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="probit"), orings)
summary(model)
log_likelihood = function(beta, orings) {
eta = cbind(1, orings$temp) %*% beta
p = pnorm(eta)
return(sum(orings$damage * log(p) + (6-orings$damage) * log(1 - p)))
}
(beta_hat <- optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1))$par)
library(faraway)
data(orings)
str(orings)
log_likelihood = function(beta, orings) {
eta = cbind(1, orings$temp) %*% beta
p = pnorm(eta)
return(sum(orings$damage * log(p) + (6-orings$damage) * log(1 - p)))
}
(beta_hat <- optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1))$par)
#model = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="probit"), orings)
#summary(model)
optimization = optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1), hessian=T)
mle = optimization$par
fisher_info = -optimization$hessian
sigma = solve(fisher_info) # Inverse of the fisher information
(beta_0_CI = mle[1] + c(-1, 1) * 1.96*sqrt(diag(sigma))[1])
(beta_1_CI = mle[2] + c(-1, 1) * 1.96*sqrt(diag(sigma))[2])
#confint(model, level = 0.95)
(max_log_likelihood_F = log_likelihood(beta_hat, orings)) # Full model
y = orings$damage
n = rep(6, length(y))
p_hat_N = sum(y)/sum(n)
(max_log_likelihood_R = sum(y)*log(p_hat_N) + sum(6-y)*log(1-p_hat_N)) # Reduced or null model
(LR = -2*(max_log_likelihood_R - max_log_likelihood_F))
(pchisq(LR, df=1,lower=FALSE))
eta_hat = beta_hat[1]+beta_hat[2]*31
si2 = matrix(c(1, 31), 1, 2,) %*% sigma %*% matrix(c(1, 31), 2, 1)
eta_l = eta_hat - 1.96 * sqrt(si2)
eta_u = eta_hat + 1.96 * sqrt(si2)
(c(eta_l, eta_hat, eta_u))
(pnorm(c(eta_l, eta_hat, eta_u)))
# Plot the data
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage",
main="Plot of Fitted models with Logit and Probit links")
# Plot probit model line
x <- seq(25,85,1)
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
# Obtain coefficients for logit model
logitmodel = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="logit"), orings)
beta_logit = logitmodel$coefficients
# Plot logit model line
lines(x, ilogit(beta_logit[1] + beta_logit[2]*x), col="blue")
legend("topright", legend=c("Probit", "Logit"),
col=c("red", "blue"), lty=1, cex=0.8)
library(faraway)
missing <- with(pima, missing <- glucose==0 | diastolic==0 | triceps==0 | bmi == 0)
pima_subset = pima[!missing, c(6,9)]
str(pima_subset)
q2model = glm(cbind(test, 1-test) ~ bmi, family=binomial(link="logit"), pima_subset)
summary(q2model)
(eta_change = q2model$coefficients[2]*7)
# Var(y) = var(beta_0) + var(beta_1)
se_y = sqrt(0.52783^2 + (7*0.01528)^2)
eta_l = eta_change - 1.96 * se_y
eta_r = eta_change + 1.96 * se_y
c(eta_l, eta_r)
model = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="probit"), orings)
summary(model)
?ilogit
?pnorm
(eta = beta_hat[1] + beta_hat[2]*orings$temp)
(p = pnorm(eta))
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
(I11 = sum(6*dnorm(eta)/(p*(1-p))))
fisher_info
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
Iinv
sigma
sqrt(Iinv[1, 1])
sqrt(Iinv[2, 2])
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
(beta_0_CI = mle[1] + c(-1, 1) * 1.96*sqrt(diag(Iinv))[1])
(beta_1_CI = mle[2] + c(-1, 1) * 1.96*sqrt(diag(Iinv))[2])
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)^2/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)^2/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)^2/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
(beta_0_CI = mle[1] + c(-1, 1) * 1.96*sqrt(diag(Iinv))[1])
(beta_1_CI = mle[2] + c(-1, 1) * 1.96*sqrt(diag(Iinv))[2])
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)^2/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)^2/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)^2/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
# Standard error for beta_0
(se_b0 = sqrt(Iinv[1, 1]))
# Standard error for beta_1
(se_b1 = sqrt(Iinv[2, 2]))
(beta_0_CI = mle[1] + c(-1, 1) * 1.96*se_b0)
(beta_1_CI = mle[2] + c(-1, 1) * 1.96*se_b1)
optimization = optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1), hessian=T)
mle = optimization$par
fisher_info = -optimization$hessian
sigma = solve(fisher_info) # Inverse of the fisher information
(beta_0_CI = mle[1] + c(-1, 1) * 1.96*sqrt(diag(sigma))[1])
(beta_1_CI = mle[2] + c(-1, 1) * 1.96*sqrt(diag(sigma))[2])
confint(model, level = 0.95)
library(faraway)
data(orings)
str(orings)
log_likelihood = function(beta, orings) {
eta = cbind(1, orings$temp) %*% beta
p = pnorm(eta)
return(sum(orings$damage * log(p) + (6-orings$damage) * log(1 - p)))
}
(beta_hat <- optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1))$par)
model = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="probit"), orings)
summary(model)
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)^2/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)^2/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)^2/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
# Standard error for beta_0
(se_b0 = sqrt(Iinv[1, 1]))
# Standard error for beta_1
(se_b1 = sqrt(Iinv[2, 2]))
# Confidence interval for beta_0
(beta_0_CI = beta_hat[1] + c(-1, 1) * 1.96*se_b0)
# Confidence interval for beta_1
(beta_1_CI = beta_hat[2] + c(-1, 1) * 1.96*se_b1)
(max_log_likelihood_F = log_likelihood(beta_hat, orings)) # Full model
y = orings$damage
n = rep(6, length(y))
p_hat_N = sum(y)/sum(n)
(max_log_likelihood_R = sum(y)*log(p_hat_N) + sum(6-y)*log(1-p_hat_N)) # Reduced or null model
(LR = -2*(max_log_likelihood_R - max_log_likelihood_F))
(pchisq(LR, df=1,lower=FALSE))
eta_hat = beta_hat[1]+beta_hat[2]*31
si2 = matrix(c(1, 31), 1, 2,) %*% sigma %*% matrix(c(1, 31), 2, 1)
eta_l = eta_hat - 1.96 * sqrt(si2)
eta_u = eta_hat + 1.96 * sqrt(si2)
(c(eta_l, eta_hat, eta_u))
(pnorm(c(eta_l, eta_hat, eta_u)))
# Plot the data
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage",
main="Plot of Fitted models with Logit and Probit links")
# Plot probit model line
x <- seq(25,85,1)
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
# Obtain coefficients for logit model
logitmodel = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="logit"), orings)
beta_logit = logitmodel$coefficients
# Plot logit model line
lines(x, ilogit(beta_logit[1] + beta_logit[2]*x), col="blue")
legend("topright", legend=c("Probit", "Logit"),
col=c("red", "blue"), lty=1, cex=0.8)
library(faraway)
missing <- with(pima, missing <- glucose==0 | diastolic==0 | triceps==0 | bmi == 0)
pima_subset = pima[!missing, c(6,9)]
str(pima_subset)
q2model = glm(cbind(test, 1-test) ~ bmi, family=binomial(link="logit"), pima_subset)
summary(q2model)
(eta_change = q2model$coefficients[2]*7)
# Var(y) = var(beta_0) + var(beta_1)
se_y = sqrt(0.52783^2 + (7*0.01528)^2)
eta_l = eta_change - 1.96 * se_y
eta_r = eta_change + 1.96 * se_y
c(eta_l, eta_r)
qnorm(0.975)
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)^2/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)^2/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)^2/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
# Standard error for beta_0
(se_b0 = sqrt(Iinv[1, 1]))
# Standard error for beta_1
(se_b1 = sqrt(Iinv[2, 2]))
# Confidence interval for beta_0
(beta_0_CI = beta_hat[1] + c(-1, 1) * qnorm(0.975) * se_b0)
# Confidence interval for beta_1
(beta_1_CI = beta_hat[2] + c(-1, 1) * qnorm(0.975) * se_b1)
eta_hat = beta_hat[1]+beta_hat[2]*31
si2 = matrix(c(1, 31), 1, 2,) %*% Iinv %*% matrix(c(1, 31), 2, 1)
eta_l = eta_hat - 1.96 * sqrt(si2)
eta_u = eta_hat + 1.96 * sqrt(si2)
(c(eta_l, eta_hat, eta_u))
(pnorm(c(eta_l, eta_hat, eta_u)))
eta_hat = beta_hat[1]+beta_hat[2]*31
si2 = matrix(c(1, 31), 1, 2,) %*% Iinv %*% matrix(c(1, 31), 2, 1)
eta_l = eta_hat - qnorm(0.975) * sqrt(si2)
eta_u = eta_hat + qnorm(0.975) * sqrt(si2)
(c(eta_l, eta_hat, eta_u))
(pnorm(c(eta_l, eta_hat, eta_u)))
# Plot the data
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage",
main="Plot of Fitted models with Logit and Probit links")
# Plot probit model line
x <- seq(25,85,1)
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
# Obtain coefficients for logit model
logitmodel = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="logit"), orings)
beta_logit = logitmodel$coefficients
# Plot logit model line
lines(x, ilogit(beta_logit[1] + beta_logit[2]*x), col="blue")
legend("topright", legend=c("Probit", "Logit"),
col=c("red", "blue"), lty=1, cex=0.8)
# Var(y) = var(beta_0) + var(beta_1)
se_b0 = 0.52783
se_b1 = 0.01528
se_y = sqrt(se_b0^2 + (7*se_b1)^2)
eta_l = eta_change - 1.96 * se_y
eta_r = eta_change + 1.96 * se_y
c(eta_l, eta_r)
library(faraway)
data(orings)
str(orings)
log_likelihood = function(beta, orings) {
eta = cbind(1, orings$temp) %*% beta
p = pnorm(eta)
return(sum(orings$damage * log(p) + (6-orings$damage) * log(1 - p)))
}
(beta_hat <- optim(c(10, -.1), log_likelihood, orings=orings, control=list(fnscale=-1))$par)
eta = beta_hat[1] + beta_hat[2]*orings$temp
p = pnorm(eta)
I11 = sum(6*dnorm(eta)^2/(p*(1-p)))
I12 = sum(6*orings$temp*dnorm(eta)^2/(p*(1-p)))
I22 = sum(6*orings$temp^2*dnorm(eta)^2/(p*(1-p)))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
# Standard error for beta_0
(se_b0 = sqrt(Iinv[1, 1]))
# Standard error for beta_1
(se_b1 = sqrt(Iinv[2, 2]))
# Confidence interval for beta_0
(beta_0_CI = beta_hat[1] + c(-1, 1) * qnorm(0.975) * se_b0)
# Confidence interval for beta_1
(beta_1_CI = beta_hat[2] + c(-1, 1) * qnorm(0.975) * se_b1)
(max_log_likelihood_F = log_likelihood(beta_hat, orings)) # Full model
y = orings$damage
n = rep(6, length(y))
p_hat_N = sum(y)/sum(n)
(max_log_likelihood_R = sum(y)*log(p_hat_N) + sum(6-y)*log(1-p_hat_N)) # Reduced or null model
(LR = -2*(max_log_likelihood_R - max_log_likelihood_F))
(pchisq(LR, df=1,lower=FALSE))
eta_hat = beta_hat[1]+beta_hat[2]*31
si2 = matrix(c(1, 31), 1, 2,) %*% Iinv %*% matrix(c(1, 31), 2, 1)
eta_l = eta_hat - qnorm(0.975) * sqrt(si2)
eta_u = eta_hat + qnorm(0.975) * sqrt(si2)
(c(eta_l, eta_hat, eta_u))
(pnorm(c(eta_l, eta_hat, eta_u)))
# Plot the data
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage",
main="Plot of Fitted models with Logit and Probit links")
# Plot probit model line
x <- seq(25,85,1)
lines(x, pnorm(beta_hat[1] + beta_hat[2]*x), col="red")
# Obtain coefficients for logit model
logitmodel = glm(cbind(damage,6-damage) ~ temp, family=binomial(link="logit"), orings)
beta_logit = logitmodel$coefficients
# Plot logit model line
lines(x, ilogit(beta_logit[1] + beta_logit[2]*x), col="blue")
legend("topright", legend=c("Probit", "Logit"),
col=c("red", "blue"), lty=1, cex=0.8)
library(faraway)
missing <- with(pima, missing <- glucose==0 | diastolic==0 | triceps==0 | bmi == 0)
pima_subset = pima[!missing, c(6,9)]
str(pima_subset)
q2model = glm(cbind(test, 1-test) ~ bmi, family=binomial(link="logit"), pima_subset)
summary(q2model)
(eta_change = q2model$coefficients[2]*7)
# Var(y) = var(beta_0) + var(beta_1)
se_b0 = 0.52783
se_b1 = 0.01528
se_y = sqrt(se_b0^2 + (7*se_b1)^2)
eta_l = eta_change - 1.96 * se_y
eta_r = eta_change + 1.96 * se_y
c(eta_l, eta_r)
getwd()
?cornnit
library(faraway)
data(cornnit)
str(cornnit)
?glm
?gamma
?glm
?Gamma
library(faraway)
data(cornnit)
str(cornnit)
par(mfrow=c(2,2))
plot(1/yield ~ log(nitrogen+1), data=cornnit)
plot(log(yield) ~ log(nitrogen+1), data=cornnit)
plot(yield ~ log(nitrogen+1), data=cornnit)
model = glm(yield ~ nitrogen, family=Gamma, data=cornnit)
summary(model)
residual = residuals(model, type="pearson")
residual
residual = residuals(model, type="pearson")
dis_par = sum(residual)/43
dis_par
residual = residuals(model, type="pearson")
dis_par = sum(residual)/42
dis_par
residual = residuals(model, type="pearson")
dis_par = sum(residual)
dis_par
residual = residuals(model, type="pearson")
dis_par = sum(residual^2)/42
dis_par
anova(model, test="F")
F_stat = (2.4061-1.7137)/dis_par
F_stat
data(dvisits)
str(dvisits)
pmod = glm(doctorco ~ sex + age + agesq + income + levyplus + freepoor +
freerepa + illness + actdays + hscore + chcond1, family=poisson, data=dvisits)
summary(pmod)
step(pmod)
p_residual = residuals(pmod, type="response")
p_residual
pmod$fitted.values
plot(p_residual ~ pmod$fitted.values)
pmod = glm(doctorco ~ sex + age + agesq + income + levyplus + freepoor +
freerepa + illness + actdays + hscore + chcond1, family=poisson, data=dvisits)
drop1(pmod)
?drop1
pmod = glm(doctorco ~ sex + age + agesq + income + levyplus + freepoor +
freerepa + illness + actdays + hscore + chcond1, family=poisson, data=dvisits)
drop1(pmod, test="Chisq")
gmod <- glm(yield ~ log(nitrogen+1), data=cornnit, family=Gamma(link="identity"))
summary(gmod)
residual = residuals(gmod, type="pearson")
dis_par = sum(residual^2)/42
dis_par
anova(gmod, test="F")
F_stat = (2.40614-0.87603)/dis_par
F_stat
pmod2=step(pmod, scope=~., trace=0)
summary(pmod2)
pchisq(deviance(pmod2),5181, lower.tail=FALSE)
p_residual = residuals(pmod2, type="response")
plot(p_residual ~ pmod2$fitted.values)
pmod3 <- glm(doctorco ~ sex + age +income + freepoor + illness + actdays + hscore, family=poisson, data=dvisits)
drop1(pmod3, scope=~., test="Chisq")
pmod3$coefficients
last_person = dvisits[5190,]
last_person
last_person = dvisits[5190,]
lambda <- exp(predict(pmod3, last_person))
dpois(0:9, lambda)
?dpois
predict(pmod3, last_person)
exp(predict(pmod3, last_person))
dpoit(0, 0.1682032)
dpois(0, 0.1682032)
dpois(1, 0.1682032)
dpois(2, 0.1682032)
?read_parquet
??read_parquet
setwd("/Users/idere_/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/2023 Semester 2/ADS/Project 1/mast30034-project-1-iderbyambadorj/data/curated")
mydata = read.csv('encoded.csv')
mydata = read.csv('encoded.csv/')
mydata = read.csv('encoded.csv')
mydata = read.csv('encoded.csv')
View(mydata)
mydata = read.csv('encoded.csv')
View(mydata)
mydata = read.csv('encoded.csv')
str(mydata)
mydata = read.csv('encoded.csv')
mydata$pulocationid = factor(mydata$pulocationid)
mydata$pickup_dayofweek = factor(mydata$pickup_dayofweek)
mydata$pickup_hour = factor(mydata$pickup_hour)
mydata$season = factor(mydata$season)
str(mydata)
lmodel = lm(trip_count ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops_density, data=mydata)
summary(lmodel)
step(lmodel)
mydata = read.csv('encoded.csv')
#mydata$pulocationid = factor(mydata$pulocationid)
mydata$pickup_dayofweek = factor(mydata$pickup_dayofweek)
mydata$pickup_hour = factor(mydata$pickup_hour)
mydata$season = factor(mydata$season)
str(mydata)
lmodel = lm(trip_count ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops_density, data=mydata)
summary(lmodel)
step(lmodel)
lmodel$fitted.values
?rmse
sqrt(mean(lmodel$residuals^2))
getwd()
setwd("/Users/idere_/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/2023 Semester 2/ADS/Project 1/mast30034-project-1-iderbyambadorj/data/curated")
mydata = read.csv('pickup.csv')
mydata$pickup_dayofweek = factor(mydata$pickup_dayofweek)
mydata$pickup_hour = factor(mydata$pickup_hour)
mydata$season = factor(mydata$season)
str(mydata)
setwd("/Users/idere_/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/2023 Semester 2/ADS/Project 1/mast30034-project-1-iderbyambadorj/data/curated")
data = read.csv('pickup.csv')
data$pulocationid=factor(data$pulocationid)
data$pickup_dayofweek = factor(data$pickup_dayofweek)
data$pickup_hour = factor(data$pickup_hour)
data$season = factor(data$season)
data$borough = factor(data$borough)
data$Shape_Area = 1000 * data$Shape_Area
str(mydata)
setwd("/Users/idere_/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/2023 Semester 2/ADS/Project 1/mast30034-project-1-iderbyambadorj/data/curated")
data = read.csv('pickup.csv')
data$pulocationid=factor(data$pulocationid)
data$pickup_dayofweek = factor(data$pickup_dayofweek)
data$pickup_hour = factor(data$pickup_hour)
data$season = factor(data$season)
data$borough = factor(data$borough)
data$Shape_Area = 1000 * data$Shape_Area
str(data)
setwd("/Users/idere_/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/2023 Semester 2/ADS/Project 1/mast30034-project-1-iderbyambadorj/data/curated")
data = read.csv('pickup.csv')
data$pulocationid=factor(data$pulocationid)
data$pickup_dayofweek = factor(data$pickup_dayofweek)
data$pickup_hour = factor(data$pickup_hour)
data$season = factor(data$season)
data$borough = factor(data$borough)
data$Shape_Area = 1000 * data$Shape_Area
str(data)
lmodel = lm(trip_count ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops + Shape_Area + borough, data=data)
lmodel = lm(pickup_count ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops + Shape_Area + borough, data=data)
summary(lmodel)
plot(lmodel)
reduced = lm(pickup_count ~ num_stops + Shape_Area, data=data)
plot(reduced)
#log_reduced = lm(log(pickup_count) ~ num_stops + Shape_Area, data=data)
#reduced = lm(pickup_count ~ num_stops + Shape_Area, data=data)
#plot(reduced)
log_reduced = lm(log(pickup_count) ~ num_stops + Shape_Area, data=data)
plot(log_reduced)
logmodel = lm(log(pickup_count) ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops + Shape_Area + borough, data=data)
summary(logmodel)
step(logmodel)
gc()
gc()
step(logmodel)
newdata = data[-110244,]
#reduced = lm(pickup_count ~ num_stops + Shape_Area, data=data)
#plot(reduced)
log_reduced = lm(log(pickup_count) ~ num_stops + Shape_Area, data=newdata)
plot(log_reduced)
newdata = data[-110244,]
#reduced = lm(pickup_count ~ num_stops + Shape_Area, data=data)
#plot(reduced)
log_reduced = lm(log(pickup_count) ~ num_stops + Shape_Area, data=data)
summary(log_reduced)
log_reduced_new = lm(log(pickup_count) ~ num_stops + Shape_Area, data=newdata)
summary(log_reduced_new)
plot(log_reduced)
newdata = data[-110244,]
#reduced = lm(pickup_count ~ num_stops + Shape_Area, data=data)
#plot(reduced)
log_reduced = lm(log(pickup_count) ~ num_stops + Shape_Area, data=data)
summary(log_reduced)
log_reduced_new = lm(log(pickup_count) ~ num_stops + Shape_Area, data=newdata)
summary(log_reduced_new)
plot(log_reduced_new)
n <- nrow(data)
cooksD <- cooks.distance(logmodel)
#identify influential points
influential_obs <- as.numeric(names(cooksD)[(cooksD > (4/n))])
#define new data frame with influential points removed
outliers_removed <- data[-influential_obs, ]
newlogmodel = lm(log(pickup_count) ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops + Shape_Area + borough, data=outliers_removed)
summary(newlogmodel)
newlogmodel$fitted.values
fitted = exp(newlogmodel$fitted.values)
squared_residuals <- (outliers_removed$pickup_count - fitted)^2
# Calculate RMSE
(rmse <- sqrt(mean(squared_residuals)))
?describe
?summary
summary(outliers_removed)
anova(newlogmodel)
View(outliers_removed)
final_log_model = lm(log(pickup_count) ~ pulocationid + pickup_hour + pickup_dayofweek +
season + num_stops + borough, data=outliers_removed)
summary(final_log_model)
anova(final_log_model)
?anova
anova(newlogmodel, final_log_model)
anova(final_log_model, newlogmodel)
